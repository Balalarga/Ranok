cmake_minimum_required(VERSION 3.20)

project(ThirdParty LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(WIN32)
    set(PROJECT_LIBS glew32 opengl32 glu32 Imm32)
    if(MINGW)
        set(PROJECT_LIBS ${PROJECT_LIBS} mingw32)
    endif()
else(WIN32)
    set(PROJECT_LIBS GLEW GL GLU)
endif(WIN32)

# GLEW setup
set(ADDITIONAL_INCLUDE_DIRS GLEW/include)
set(ADDITIONAL_LINK_DIRS GLEW/lib)
set(LOCAL_THIRDPARTY_BINARIES ${CMAKE_CURRENT_SOURCE_DIR}/GLEW/bin)

# GLM includes
set(ADDITIONAL_INCLUDE_DIRS ${ADDITIONAL_INCLUDE_DIRS} glm)

# SDL2 setup
set(ADDITIONAL_INCLUDE_DIRS ${ADDITIONAL_INCLUDE_DIRS} SDL2/include)
list(APPEND LOCAL_THIRDPARTY_BINARIES ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/bin)
set(PROJECT_LIBS ${PROJECT_LIBS} SDL2 SDL2main SDL2_image SDL2_ttf)
if (MSVC)
    set(ADDITIONAL_LINK_DIRS ${ADDITIONAL_LINK_DIRS} SDL2/lib/MSVC/x64)
else()
    set(ADDITIONAL_LINK_DIRS ${ADDITIONAL_LINK_DIRS} SDL2/lib/MinGW/x64)
endif()

# FMT setup
add_subdirectory(fmt)
set_target_properties(fmt PROPERTIES FOLDER ${PROJECT_NAME})
set(ADDITIONAL_INCLUDE_DIRS ${ADDITIONAL_INCLUDE_DIRS} fmt)
set(PROJECT_LIBS ${PROJECT_LIBS} fmt)

# ImGui setup
file(GLOB ADDITIONAL_SOURCES ImGui/*.cpp ImGui/*.h ImGui/*.hpp)
set(ADDITIONAL_SOURCES ${ADDITIONAL_SOURCES}
    # Main Imgui files
    ImGui/backends/imgui_impl_sdl.cpp
    ImGui/backends/imgui_impl_opengl3.cpp)
set(ADDITIONAL_INCLUDE_DIRS ${ADDITIONAL_INCLUDE_DIRS} ImGui/)
set(ADDITIONAL_INCLUDE_DIRS ${ADDITIONAL_INCLUDE_DIRS} ImGui/backends/)

# OpenCL
find_package(OpenCL REQUIRED)
set(ADDITIONAL_INCLUDE_DIRS ${ADDITIONAL_INCLUDE_DIRS} ${OpenCL_INCLUDE_DIRS})
set(PROJECT_LIBS ${PROJECT_LIBS} ${OpenCL_LIBRARY})

add_library(${PROJECT_NAME} ${ADDITIONAL_SOURCES})
set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER ${PROJECT_NAME})
target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${PROJECT_LIBS})
target_link_directories(${PROJECT_NAME} PUBLIC ${ADDITIONAL_LINK_DIRS})
target_include_directories(${PROJECT_NAME} PUBLIC ${ADDITIONAL_INCLUDE_DIRS})

set(THIRDPARTY_BINARIES ${LOCAL_THIRDPARTY_BINARIES} PARENT_SCOPE)