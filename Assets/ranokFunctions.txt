SymetryAxis
{
args o;
return abs(o);
}

Cut
{
args func, axis, len;
return func & -axis & -(axis + len);
}

Translate
{
args axis, position;
return axis - position;
}

Scale
{
args axis, scale;
return axis * scale;
}

Sphere
{
args x, y, z, r;
return r^2 - x^2 - y^2 - z^2;
}

Prisma
{
args x, y, z, lenX, lenY, lenZ;
return (lenX - abs(x)) & (lenY - abs(y)) & (lenZ - abs(z));
}

Cube
{
args x, y, z, size;
return Prisma(x, y, z, size, size, size);
}

Tor
{
args planeAxis1, planeAxis2, dirAxis, r, R;
return r^2 - (sqrt(planeAxis1^2 + planeAxis2^2) - R)^2 - dirAxis^2;
}

Circle
{
args axis1, axis2, radius;
return radius^2 - axis1^2 - axis2^2;
}

CircleArrayEvenXY
{
args s[3], halfCount, radius;
no = halfCount;
ro = sqrt(s[0]^2 + s[1]^2);
tet = arctan(s[1] / s[0]);

ff = tet * no;
mu = 4 / PI / no * (sin(ff) - sin(3*ff)/9 + sin(5*ff)/25 - sin(7*ff)/49); // Похоже на костыль

x11 = ro * cos(mu) - radius; // радиус вычитается именно из косинуса
y11 = ro * sin(mu);
sn[3] = { x11, y11, s[2] };
return sn;
}
